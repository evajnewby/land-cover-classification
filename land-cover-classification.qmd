---
title: "Land Cover Classification of Santa Barbara"
author:
  name: Eva Newby
date: December 7, 2024
format: html
execute: 
  warning: false
  error: false
editor: visual
editor_options: 
  chunk_output_type: console
---

## About

Determining land cover types over large areas is a major application of remote sensing as we are able to distinguish different materials based on their spectral reflectance.

Classifying remotely sensed imagery into land cover classes enables us to understand the distribution and change in land cover types over large areas.

The following code uses a decision tree classifier, a supervised classification, that required training data from the user. Decision trees classify pixels based on a series of conditions based on values in spectral bands. The 4 land cover types that will be classified in the following code are green vegetation, dry grass or soil, urban, and/or water. 

## Highlights:

-   Load and process Landsat scene
-   Crop and mask Landsat data to study area
-   Extract spectral data at training sites
-   Train and apply decision tree classifier
-   Plot results

## The Data:

The data used is from the Landsat 5 Thematic mapper, and contains 1 scene from September 25, 2007, with bands 1, 2, 3, 4, 5, 6, and 7. Additionally, there is a shapefile representing southern Santa Barbara county, and training data containing polygons representing sites. 

Data citation: 
- U.S. Geological Survey, September 25, 2007. Landsat 5. U.S. Department of the Interior. Retrieved December 6, 2024, from https://www.usgs.gov/landsat-missions/landsat-5.

## Load Packages

```{r}
library(sf) # vector data
library(terra) # raster data
library(here) # file path management
library(tidyverse)
library(rpart) # recursive partitioning and regression trees
library(rpart.plot) # plotting for rpart
library(tmap) # map making
```

## Load in Landsat data and stack.
To create a raster stack, create a list of the files from the data folder and read them all in at once using the `terra::rast()` function.
```{r}
# list files for each band, including the full file path
filelist <- list.files(here::here("data", "landsat-data"), full.names = TRUE)

# read in and store as a raster stack
landsat <- rast(filelist)

# update layer names to match band
names(landsat) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")

# plot true color image
plotRGB(landsat, r = 3, g = 2, b = 1, stretch = "lin")
```

## Load the Study area
The focus area is southern Santa Barbara county, as this is where we have training data. 
```{r}
# Read in shapefile for portion of sb county
SB_county_south <- st_read(here("data", "SB_county_south.shp")) %>% 
  st_transform(., crs = crs(landsat))
```

```{r}
# Plot shapefile border
tm_shape(SB_county_south) +
  tm_borders()
```

## Crop and mask Landsat data to the study area
Do this to reduce the amount of data and save computational time. 

```{r}
# Crop the landsat scene to the extent of the study area
landsat_cropped <- terra::crop(landsat, SB_county_south)

# mask the raster to the study area
landsat_masked <- terra::mask(landsat_cropped, SB_county_south)
```

```{r}
# Remove some objects
rm(landsat, SB_county_south, landsat_cropped)
```

```{r}
# plot rgb
plotRGB(landsat_masked, r=3, g=2, b=1, stretch = 'bin')
```

## Convert Landsat values into reflectance
In this case, we are working with Landsat Collection 2. The valid range of pixel values for this collection goes from 7,273 to 43,636 with a multiplicative scale factor of 0.0000275 and an additive scale factor of -0.2. 

```{r}
# reclassify erroneous values as NA
rcl <- matrix(c(-Inf, 7273, NA,
                 43636, Inf, NA), ncol = 3, byrow = TRUE)

landsat <- classify(landsat_masked, rcl = rcl)

# adjust values based on scaling factor
landsat <- (landsat * 0.0000275 - 0.2) * 100

# check values are 0 - 100
summary(landsat)
```
Now the pixel values should range from 0-100%!

## Training classifier

```{r}
# Load in shapefile identifying locations within the study area that contains one of the four land cover types. 
training_data <- st_read(here::here("data", "trainingdata.shp")) %>%
  st_transform(., crs = crs(landsat))
```

```{r}
# Extract spectral reflectance values at training sites
training_data_values <- terra::extract(landsat, training_data, df = TRUE)

# convert training data to data frame
training_data_attributes <- training_data %>%
  st_drop_geometry()

# join training data attributes and extracted reflectance values
SB_training_data <- left_join(training_data_values, training_data_attributes,
                              by = c("ID" = "id")) %>%
                    mutate(type = as.factor(type)) # convert landcover type to factor
```

## Train the decision tree
Use the `rpart()` function, and set the method = 'class', as a classification is being performed. 

```{r}
# Establish model formula
SB_formula <- type ~ red + green + blue + NIR + SWIR1 + SWIR2
```

```{r}
# Train decision tree
SB_decision_tree <- rpart(formula = SB_formula,
                          data = SB_training_data,
                          method = "class",
                          na.action = na.omit) # remove any pixels with NAs

# View decision tree
prp(SB_decision_tree)
```
The decision tree consists of a hierarchy of binary decisions, where each decision rule produces two outcomes based on a conditional statement related to the values in each spectral band.

## Classify Image
The predict() function will return a raster layer with integer values. These integer values correspond to the factor levels in the training data. 
```{r}
# Classify image based on decision tree
SB_classification <- terra::predict(landsat, SB_decision_tree,
                                    type = "class",
                                    na.rm = TRUE)

levels(SB_training_data$type)
levels(SB_classification)
```

# View Results

```{r}
# Plot results
tm_shape(SB_classification) +
  tm_raster(palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
labels = c("green vegetation", "soil/dead grass", "urban", "water"),
title = "Landcover type") +
  tm_layout(legend.position = c("left", "bottom"),
            main.title = "Santa Barbara Landcover")
```

## Plot Summary

It appears that the decision tree was successful in creating a landcover map. The plot results make sense as Santa Barbara's coastline and urban areas appear to be accurately represented. Additionally, the distinction between soil/dead grass and green vegetation also intuitively make sense when comparing with the raw image and other satellite imagery. 
